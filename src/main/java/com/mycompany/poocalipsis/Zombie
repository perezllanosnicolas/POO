import java.util.Random;

public abstract class Zombi {
    private static int contadorZombis = 0;  
    private int identificador;
    private int aguante;
    private int activaciones;
    private String categoria;
    private Casilla posicion; 
    private boolean vivo;
    
    public Zombi(int aguante, int activaciones, String categoria, Casilla posicion) {
        this.identificador = contadorZombis++;
        this.aguante = aguante;
        this.activaciones = activaciones;
        this.categoria = categoria;
        this.vivo = true;
        this.posicion = posicion;
    }

    // Métodos de acceso
    public int getId() {
        return identificador;
    }

    public int getAguante() {
        return aguante;
    }

    public int getActivaciones() {
        return activaciones;
    }

    public String getCategoria() {
        return categoria;
    }

    public boolean isVivo() {
        return vivo;
    }

    public void setVivo(boolean vivo) {
        this.vivo = vivo;
    }

    public Casilla getPosicion() {
        return posicion;
    }

    
     // Método para mover al zombi hacia la casilla más cercana a un superviviente
    public void mover(Casilla posicionSuperviviente) {
        // Obtener las coordenadas del zombi y el superviviente
        int xZombi = this.posicion.getX();
        int yZombi = this.posicion.getY();
        int xSuperviviente = posicionSuperviviente.getX();
        int ySuperviviente = posicionSuperviviente.getY();
        
        // Lógica de movimiento del zombi: se mueve en la dirección del superviviente
        if (xZombi < xSuperviviente) {
            xZombi++;
        } else if (xZombi > xSuperviviente) {
            xZombi--;
        }

        if (yZombi < ySuperviviente) {
            yZombi++;
        } else if (yZombi > ySuperviviente) {
            yZombi--;
        }

        // Actualizar la posición del zombi
        this.posicion = new Casilla(xZombi, yZombi);
    }

 
  // Activación del zombi, determina si ataca o se mueve
    public void activar() {
        if (activaciones > 0) {
            // El zombi realiza su activación
            activaciones--;
            // Ejemplo simple: moverse hacia el superviviente más cercano (simulado aquí)
            System.out.println("El zombi con ID " + identificador + " se mueve.");
        }
    }

    // Método para que el zombi ataque
    public void morder(Superviviente superviviente) {
        if (this.posicion.equals(superviviente.getPosicion())) {
            // Realizar ataque de mordedura
            // Dependiendo del tipo de zombi, puede causar diferentes efectos
            // Si el zombi es un Caminante Tóxico, por ejemplo, el superviviente recibe daño por sangre tóxica
            if (this.categoria.equals("Caminante Tóxico") || this.categoria.equals("Corredor Tóxico") || this.categoria.equals("Abominación Tóxica")) {
                superviviente.recibirDaño(1); // Daño por sangre tóxica
            }
            else {
                superviviente.recibirDaño(1); // Daño por mordedura normal
            }
        }
    }

 
    // Método para simular un ataque a este zombi
    public void recibirAtaque(int potencia, int numeroDados, int valorExito) {
        Random random = new Random();
        int exitos = 0;
        
        // Lanzar los dados y contar éxitos
        for (int i = 0; i < numeroDados; i++) {
            if (random.nextInt(6) + 1 >= valorExito) {
                exitos++;
            }
        }

        // Resolver el ataque
        if (exitos > 0) {
            if (potencia >= aguante) {
                this.vivo = false; // Zombi eliminado
                System.out.println("Zombi con ID " + identificador + " ha sido derrotado.");
            } else {
                System.out.println("El ataque no fue suficiente para derrotar al zombi con ID " + id);
            }
        } else {
            System.out.println("El ataque falló. No hubo éxitos.");
        }
    }
}
